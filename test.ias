/* hey!! */

/***** a brilliant comment *****/

// another great comment /***//***/8/***
b2 {
	out "coro2"
	yield
	out "coro2 end"
}

b1 {
	out "coro1"
	new_func b2
	fork
	yield
}

do_something {
	yield
}

coro_test1 {
	new_func do_something
	set_context_slot "do_something"
	new_num_i 0
	set_context_slot "i"

loop: /************************************/
	get_context_slot "i"
	new_num_i 10000
	lt

	jump_false end

	get_context_slot "i"
	new_num_i 1000
	mod

	jump_true no_print

	get_context_slot "i"
	out_num

no_print:

	get_context_slot "do_something"
	fork

	get_context_slot "i"
	new_num_i 1
	add
	set_context_slot "i"

	jump loop

end:
	yield
}

fib_producer {
	set_arg "n"

	new_num_i 0
	set_context_slot "a"

	new_num_i 1
	dup
	set_context_slot "b"

	out_num

	new_num_i 0
	set_context_slot "i"

loop:
	get_context_slot "i"
	get_context_slot "n"
	lt

	jump_false end

	// c = a + b
	get_context_slot "a"
	get_context_slot "b"
	add
	set_context_slot "c"

	// a = b
	get_context_slot "b"
	set_context_slot "a"

	// b = c
	get_context_slot "c"
	dup
	set_context_slot "b"

	yield

	get_context_slot "i"
	new_num_i 1
	add
	set_context_slot "i"

	jump loop
end:

	new_null
	yield
}

fib_consumer {
loop:
	dup
	jump_false end
	out_num
	new_num_i 1
	yield
	jump loop
end:
}

coro_test2 {
	new_func fib_producer
	fork
	new_func fib_consumer
	fork

	new_num_i 30

	// wait for other coro to stop
	get_context_slot "wait_for_coro"
	invoke 1
}

wait_for_coro {
loop: yield
	dup
	jump_false end
	jump loop
end:
}

slow_fib {
	set_arg "n"

	get_context_slot "n"
	new_num_i 2
	lt
	jump_false else
		new_num_i 1
		return
	else:
	
	get_context_slot "n"
	new_num_i 1
	sub
	get_context_slot "fib"
	invoke 1
	get_context_slot "n"
	new_num_i 2
	sub
	get_context_slot "fib"
	invoke 1
	add

	return
}

root {
	new_func wait_for_coro
	set_context_slot "wait_for_coro"

	out "hi"
	new_func `a ss`
	invoke 0

	out "\n*** call test ***\n"
	new_func call
	invoke 0

	out "\n*** yield test ***\n"
	new_func b1
	fork

	yield
	out "hey!"
	yield

	out "\n*** coro creating ***\n"

	new_func coro_test1
	invoke 0

	out "\n*** p/c fib ***\n"

	new_func coro_test2
	invoke 0

	out "\n*** slow fib ***\n"

	new_num_i 30
	new_func slow_fib
	dup
	set_context_slot "fib"
	invoke 1

	out_num

	new_func slot_test1
	invoke 0

	new_func context_test1
	invoke 0

	new_func from_test
	invoke
}

context_test1 {
	new_num_i 7
	new_num_i 6
	new_num_i 5
	new_num_i 4
	new_num_i 3
	new_num_i 2
	new_num_i 1
	set_context_slot "wowowowa"
	set_context_slot "wowowowb"
	set_context_slot "wowowowc"
	set_context_slot "wowowowd"
	set_context_slot "wowowowe"
	set_context_slot "wowowowf"
	set_context_slot "wowowowg"

	new_num_i 0
	set_context_slot "i"

loop:/************************************/
	get_context_slot "i"
	new_num_i 10000000
	lt

	jump_false end

	get_context_slot "wowowowg"
	pop

	get_context_slot "i"
	new_num_i 1
	add
	dup
	set_context_slot "i"
	pop

	jump loop

end:
}

slot_test1 {
	new_num_i 7
	new_num_i 6
	new_num_i 5
	new_num_i 4
	new_num_i 3
	new_num_i 2
	new_num_i 1
	new_obj
	set_slot "wowowowa"
	set_slot "wowowowb"
	set_slot "wowowowc"
	set_slot "wowowowd"
	set_slot "wowowowe"
	set_slot "wowowowf"
	set_slot "wowowowg"

	new_num_i 0
	set_context_slot "i"


loop:/************************************/
	get_context_slot "i"
	new_num_i 10000000
	lt

	jump_false end

	dup
	get_slot "wowowowg"

	get_context_slot "i"
	dup
	new_num_i 10000
	mod
	jump_true no_set

	dup_n 2
	set_slot "wowowowg"

	pop
	pop

	jump end1

no_set: pop; pop
end1:

	get_context_slot "i"
	new_num_i 1
	add
	dup
	set_context_slot "i"
	pop

	jump loop

end:

	dup
	get_slot "wowowowg"
	out_num
}

`a ss` {
	out "this is a"
	jump c
a:
	out "a"
	jump b
b:	out "b"
	jump end
c:	out "c"
	jump a
end:
	out "end";;
}

do_nothing {}

call {
	new_func do_nothing
	set_context_slot "do_nothing"
	new_num_i 0
	set_context_slot "i"

loop:/************************************/
	get_context_slot "i"
	new_num_i 1000000
	lt

	jump_false end

	get_context_slot "do_nothing"
	invoke 0
	pop

	get_context_slot "i"
	new_num_i 1
	add
	dup
	set_context_slot "i"
	pop

	jump loop

end:
}

add_many_slot {
	new_obj
	get_proto
	new_obj; set_slot_n "a"
	new_obj; set_slot_n "b"
	new_obj; set_slot_n "c"
	new_obj; set_slot_n "d"
	new_obj; set_slot_n "e"
	new_obj; set_slot_n "f"
	new_obj; set_slot_n "g"
	new_obj; set_slot_n "h"
	new_obj; set_slot_n "i"
	new_obj; set_slot_n "j"
	new_obj; set_slot_n "k"
	new_obj; set_slot_n "l"
	new_obj; set_slot_n "m"
	new_obj; set_slot_n "n"
	new_obj; set_slot_n "o"
	new_obj; set_slot_n "p"
	new_obj; set_slot_n "q"
	new_obj; set_slot_n "r"
	new_obj; set_slot_n "s"
	new_obj; set_slot_n "t"
	new_obj; set_slot_n "u"
	new_obj; set_slot_n "v"
	new_obj; set_slot_n "w"
	new_obj; set_slot_n "x"
	new_obj; set_slot_n "y"
	new_obj; set_slot_n "z"
	new_obj; set_slot_n "aa"
	new_obj; set_slot_n "bb"
	new_obj; set_slot_n "cc"
	new_obj; set_slot_n "dd"
	new_obj; set_slot_n "ee"
	new_obj; set_slot_n "ff"
	new_obj; set_slot_n "gg"
	new_obj; set_slot_n "hh"
	new_obj; set_slot_n "ii"
	new_obj; set_slot_n "jj"
	new_obj; set_slot_n "kk"
	new_obj; set_slot_n "ll"
	new_obj; set_slot_n "mm"
	new_obj; set_slot_n "nn"
	new_obj; set_slot_n "oo"
	new_obj; set_slot_n "pp"
	new_obj; set_slot_n "qq"
	new_obj; set_slot_n "rr"
	new_obj; set_slot_n "ss"
	new_obj; set_slot_n "tt"
	new_obj; set_slot_n "uu"
	new_obj; set_slot_n "vv"
	new_obj; set_slot_n "ww"
	new_obj; set_slot_n "xx"
	new_obj; set_slot_n "yy"
	new_obj; set_slot_n "zz"
	new_obj; set_slot_n "aaa"
	new_obj; set_slot_n "bbb"
	new_obj; set_slot_n "ccc"
	new_obj; set_slot_n "ddd"
	new_obj; set_slot_n "fff"
	new_obj; set_slot_n "ggg"
	new_obj; set_slot_n "hhh"
	new_obj; set_slot_n "iii"
	new_obj; set_slot_n "jjj"
	new_obj; set_slot_n "kkk"
	new_obj; set_slot_n "lll"
	new_obj; set_slot_n "mmm"
	new_obj; set_slot_n "nnn"
	new_obj; set_slot_n "ooo"
	new_obj; set_slot_n "ppp"
	new_obj; set_slot_n "qqq"
	new_obj; set_slot_n "rrr"
	new_obj; set_slot_n "sss"
	new_obj; set_slot_n "ttt"
	new_obj; set_slot_n "uuu"
	new_obj; set_slot_n "vvv"
	new_obj; set_slot_n "www"
	new_obj; set_slot_n "xxx"
	new_obj; set_slot_n "yyy"
	new_obj; set_slot_n "zzz"
}

from_test {
	new_func add_many_slot
	invoke 0

	
}
